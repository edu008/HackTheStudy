[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisord.log
logfile_maxbytes=50MB
logfile_backups=5
loglevel=info
pidfile=/tmp/supervisor-api.pid
childlogdir=/var/log/
umask=022
identifier=supervisor-api
directory=/app
nocleanup=true
minfds=65536
minprocs=200
strip_ansi=true

[unix_http_server]
file=/tmp/supervisor-api.sock
chmod=0760
chown=root:root

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor-api.sock

[program:redis]
command=redis-server /etc/redis/redis.conf
directory=/app
user=root
autostart=true
autorestart=true
startsecs=5
startretries=3
stopasgroup=true
killasgroup=true
redirect_stderr=true
stdout_logfile=/proc/1/fd/1
stdout_logfile_maxbytes=0
stderr_logfile=/proc/1/fd/2
stderr_logfile_maxbytes=0
priority=100
numprocs=1
stopsignal=TERM
stopwaitsecs=30

[program:app]
; DigitalOcean App Platform empfiehlt 2-4 Worker f√ºr bessere Leistung
command=gunicorn --bind 0.0.0.0:8080 --workers %(ENV_GUNICORN_WORKERS)s --threads 4 --timeout 300 --graceful-timeout 120 --max-requests 1000 --max-requests-jitter 50 --access-logfile - --error-logfile - --log-level info app:app
directory=/app
user=root
autostart=true
autorestart=true
startsecs=10
startretries=5
stopasgroup=true
killasgroup=true
redirect_stderr=true
stdout_logfile=/proc/1/fd/1
stdout_logfile_maxbytes=0
stderr_logfile=/proc/1/fd/2
stderr_logfile_maxbytes=0
priority=200
environment=LOG_PREFIX="[API] ",LOG_LEVEL="INFO",RUN_MODE="app",PYTHONUNBUFFERED="1",LOG_API_REQUESTS="true",USE_COLORED_LOGS="false",DO_APP_PLATFORM="true"
stopsignal=TERM
stopwaitsecs=60

[program:health_monitor]
command=python -c "import time, json, psutil, datetime, http.server, socketserver; class HealthHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): self.send_response(200); self.send_header('Content-Type', 'application/json'); self.end_headers(); health_data = {'status': 'healthy', 'timestamp': datetime.datetime.now().isoformat(), 'memory': psutil.virtual_memory().percent, 'cpu': psutil.cpu_percent(interval=0.1), 'uptime': time.time()}; self.wfile.write(json.dumps(health_data).encode()); def log_message(self, *args): pass; socketserver.TCPServer(('', 8081), HealthHandler).serve_forever()"
directory=/app
user=root
autostart=true
autorestart=true
startsecs=5
startretries=3
stopasgroup=true
killasgroup=true
redirect_stderr=true
stdout_logfile=/var/log/health_monitor.log
stdout_logfile_maxbytes=10MB
priority=300
environment=PYTHONUNBUFFERED="1"
stopsignal=TERM
stopwaitsecs=10

[group:api]
programs=redis,app,health_monitor
priority=999 