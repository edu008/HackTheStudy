[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisord.log
logfile_maxbytes=50MB
logfile_backups=5
loglevel=info
pidfile=/tmp/supervisor-api.pid
childlogdir=/var/log/
umask=022
identifier=supervisor-api
directory=/app
nocleanup=true
minfds=65536
minprocs=200
strip_ansi=true

[unix_http_server]
file=/tmp/supervisor-api.sock
chmod=0760
chown=root:root

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor-api.sock

[program:redis]
command=redis-server /etc/redis/redis.conf
autostart=true
autorestart=true
stderr_logfile=/proc/1/fd/2
stdout_logfile=/proc/1/fd/1
redirect_stderr=true
user=root

[program:app]
command=gunicorn --config /app/config/gunicorn.conf.py app:app
directory=/app
autostart=true
autorestart=true
stderr_logfile=/proc/1/fd/2
stdout_logfile=/proc/1/fd/1
redirect_stderr=true
user=root

[program:health_monitor]
command=python -c "
import time
import json
import psutil
import http.server
import socketserver

class HealthHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        health_data = {
            'status': 'healthy',
            'memory': psutil.virtual_memory().percent,
            'cpu': psutil.cpu_percent(interval=0.1),
            'uptime': time.time()
        }
        self.wfile.write(json.dumps(health_data).encode())
    
    def log_message(self, *args):
        pass

socketserver.TCPServer(('', 8081), HealthHandler).serve_forever()
"
autostart=true
autorestart=true
stderr_logfile=/proc/1/fd/2
stdout_logfile=/proc/1/fd/1
redirect_stderr=true
user=root

[group:api]
programs=redis,app,health_monitor
priority=999 