name: hackthestudy-backend
region: fra

# App Platform-spezifische Metadaten
alerts:
  - rule: DEPLOYMENT_FAILED
  - rule: DOMAIN_FAILED
  - rule: CPU_UTILIZATION
    value: 90
    operator: GREATER_THAN
    window: FIVE_MINUTES
  - rule: MEM_UTILIZATION
    value: 90
    operator: GREATER_THAN
    window: FIVE_MINUTES
  - rule: RESTART_COUNT
    value: 5
    operator: GREATER_THAN
    window: THIRTY_MINUTES

# Gemeinsame Umgebungsvariablen für alle Services
envs:
  # Datenbank-Konfiguration
  - key: DATABASE_URL
    scope: RUN_TIME
    type: SECRET
  
  # Server-Konfiguration
  - key: FLASK_APP
    value: app.py
  - key: PORT
    value: "8080"  # DigitalOcean erwartet Port 8080
  - key: FLASK_DEBUG
    value: "false"
  - key: GUNICORN_WORKERS
    value: "1"
  - key: GUNICORN_THREADS
    value: "4"
  - key: GUNICORN_TIMEOUT
    value: "120"
  
  # Sicherheit
  - key: JWT_SECRET
    scope: RUN_TIME
    type: SECRET
  - key: FLASK_SECRET_KEY
    scope: RUN_TIME
    type: SECRET
  
  # OpenAI-Konfiguration
  - key: OPENAI_API_KEY
    scope: RUN_TIME
    type: SECRET
  - key: OPENAI_MODEL
    value: "gpt-4o"
  - key: OPENAI_CACHE_ENABLED
    value: "true"
  - key: OPENAI_CACHE_TTL
    value: "86400"  # 24 Stunden
  
  # URL-Konfiguration
  - key: FRONTEND_URL
    value: "https://www.hackthestudy.ch"
  - key: API_URL
    scope: RUN_AND_BUILD_TIME
    value: "${APP_URL}"
  - key: CORS_ORIGINS
    value: "https://www.hackthestudy.ch,${APP_URL}"
  
  # Payment-Konfiguration
  - key: STRIPE_API_KEY
    scope: RUN_TIME
    type: SECRET
  - key: STRIPE_WEBHOOK_SECRET
    scope: RUN_TIME
    type: SECRET
  - key: STRIPE_PUBLISHABLE_KEY
    scope: RUN_TIME
    type: SECRET
  
  # OAuth-Konfiguration
  - key: GOOGLE_CLIENT_ID
    scope: RUN_TIME
    type: SECRET
  - key: GOOGLE_CLIENT_SECRET
    scope: RUN_TIME
    type: SECRET
  - key: GITHUB_CLIENT_ID
    scope: RUN_TIME
    type: SECRET
  - key: GITHUB_CLIENT_SECRET
    scope: RUN_TIME
    type: SECRET
  
  # Logging
  - key: LOG_LEVEL
    value: INFO
  - key: USE_COLORED_LOGS
    value: "false"
  - key: LOG_API_REQUESTS
    value: "true"
  
  # DigitalOcean App Platform spezifische Variablen
  - key: DO_APP_PLATFORM
    value: "true"
  - key: USE_SUPERVISOR
    value: "true"
  
  # Celery Worker Konfiguration
  - key: CELERY_POOL
    value: "solo"
  - key: CELERY_WORKERS
    value: "1"
  - key: CELERY_TASK_TIME_LIMIT
    value: "3600"

services:
  # API-Service mit Redis
  - name: api
    type: web
    github:
      repo: edu008/HackTheStudy
      branch: main
      deploy_on_push: true
    source_dir: backend/main
    dockerfile_path: Dockerfile
    http_port: 8080
    # Ressourcen und Skalierung
    instance_count: 1
    instance_size_slug: basic-s
    health_check:
      http_path: /api/v1/health
      port: 8080
      initial_delay_seconds: 180
      period_seconds: 60
      timeout_seconds: 30
      success_threshold: 1
      failure_threshold: 5
    # Erhöhte Limits für bessere Stabilität
    alert_options:
      error_count:
        operator: GREATER_THAN
        value: 10
        window: FIVE_MINUTES
    # Automatische Neustarts
    restart_policy:
      condition: on_failure
      delay: 5s
      max_attempts: 0
      window: 0s
    envs:
      - key: CONTAINER_TYPE
        value: "api"
      - key: DIGITAL_OCEAN_APP_NAME
        value: "hackthestudy-backend"
      - key: DIGITAL_OCEAN_DEPLOYMENT_ID
        value: "${APP_DEPLOYMENT_ID}"
      - key: LOG_PREFIX
        value: "[API]"
      - key: REDIS_URL
        value: "redis://localhost:6379/0"
      - key: REDIS_HOST
        value: "localhost"

  # Worker-Service 
  - name: worker
    type: worker
    github:
      repo: edu008/HackTheStudy
      branch: main
      deploy_on_push: true
    source_dir: backend/worker
    dockerfile_path: Dockerfile
    # Ressourcen und Skalierung (weniger Ressourcen für Worker nötig)
    instance_count: 1
    instance_size_slug: basic-xs
    restart_policy:
      condition: on_failure
      delay: 15s
      max_attempts: 10
      window: 120s
    # Verbindung zum Redis im API-Container über externe URL
    envs:
      - key: CONTAINER_TYPE
        value: "worker"
      - key: RUN_MODE
        value: "worker"
      - key: LOG_PREFIX
        value: "[WORKER]"
      - key: REDIS_URL
        value: "redis://${api.PRIVATE_URL}:6379/0"
      - key: REDIS_HOST
        value: "${api.PRIVATE_URL}"
      # Direkte IP-Fallbacks (falls die DigitalOcean-Variablen nicht ersetzt werden)
      - key: API_HOST
        value: "localhost" # oder bekannte DigitalOcean-Container-IP 
      - key: REDIS_FALLBACK_URLS
        value: "localhost,10.0.0.3,api,hackthestudy-backend-api"

# Domain-Konfiguration
domains:
  - domain: api.hackthestudy.ch
    type: PRIMARY

openapi: 3.0.3
info:
  title: HackTheStudy API
  description: |
    API für die HackTheStudy-Plattform.
    Ermöglicht das Verarbeiten von Lernmaterialien, Generieren von Lernhilfen
    und die Verwaltung von Benutzerdaten.
  version: 1.0.0
  contact:
    name: HackTheStudy Support
    email: support@hackthestudy.com
    url: https://hackthestudy.com/contact
  license:
    name: Proprietär
    url: https://hackthestudy.com/terms

servers:
  - url: https://api.hackthestudy.com/
    description: Produktions-API-Server
  - url: https://api-staging.hackthestudy.com/
    description: Staging-API-Server
  - url: http://localhost:5000/
    description: Lokaler Entwicklungsserver

tags:
  - name: Auth
    description: Authentifizierung und Autorisierung
  - name: Upload
    description: Datei-Upload und Verarbeitung
  - name: Flashcards
    description: Verwaltung von Lernkarten
  - name: Questions
    description: Multiple-Choice-Fragen
  - name: Topics
    description: Themen und Konzepte
  - name: User
    description: Benutzerverwaltung und -profile
  - name: Payment
    description: Zahlungen und Kreditverwaltung
  - name: Admin
    description: Administrative Funktionen

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Benutzer einloggen
      description: Authentifiziert einen Benutzer mit OAuth-Anbieter
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider:
                  type: string
                  description: OAuth-Anbieter (google, github)
                  example: "google"
                code:
                  type: string
                  description: OAuth-Code vom Frontend
                  example: "4/0AY0e-g5sa7..."
      responses:
        '200':
          description: Erfolgreich eingeloggt
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT-Token für die Authentifizierung
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /upload:
    post:
      tags:
        - Upload
      summary: Datei hochladen
      description: Lädt eine oder mehrere Dateien hoch und verarbeitet diese
      operationId: uploadFiles
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Hochzuladende Dateien (max. 5)
                sessionId:
                  type: string
                  description: Sitzungs-ID (optional)
                  example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Dateien erfolgreich hochgeladen
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                    description: ID der erstellten Sitzung
                  message:
                    type: string
                    description: Erfolgsmeldung
                  fileNames:
                    type: array
                    items:
                      type: string
                    description: Liste der Dateinamen
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: Datei zu groß
        '500':
          $ref: '#/components/responses/ServerError'

  /upload/{sessionId}/status:
    get:
      tags:
        - Upload
      summary: Upload-Status abrufen
      description: Gibt den aktuellen Verarbeitungsstatus einer Sitzung zurück
      operationId: getUploadStatus
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: ID der Sitzung
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Status erfolgreich abgerufen
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [pending, processing, completed, failed]
                    description: Aktueller Verarbeitungsstatus
                  progress:
                    type: number
                    format: float
                    description: Fortschritt in Prozent (0-100)
                  message:
                    type: string
                    description: Statusmeldung oder Fehlermeldung
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /flashcards/{sessionId}:
    get:
      tags:
        - Flashcards
      summary: Lernkarten abrufen
      description: Gibt alle Lernkarten einer Sitzung zurück
      operationId: getFlashcards
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: ID der Sitzung
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Lernkarten erfolgreich abgerufen
          content:
            application/json:
              schema:
                type: object
                properties:
                  flashcards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Flashcard'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /questions/{sessionId}:
    get:
      tags:
        - Questions
      summary: Fragen abrufen
      description: Gibt alle Multiple-Choice-Fragen einer Sitzung zurück
      operationId: getQuestions
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: ID der Sitzung
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Fragen erfolgreich abgerufen
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /topics/{sessionId}:
    get:
      tags:
        - Topics
      summary: Themen abrufen
      description: Gibt alle Themen und deren Verknüpfungen einer Sitzung zurück
      operationId: getTopics
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: ID der Sitzung
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Themen erfolgreich abgerufen
          content:
            application/json:
              schema:
                type: object
                properties:
                  topics:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
                  connections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Connection'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /user/profile:
    get:
      tags:
        - User
      summary: Benutzerprofil abrufen
      description: Gibt das Profil des angemeldeten Benutzers zurück
      operationId: getUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profil erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /payment/checkout:
    post:
      tags:
        - Payment
      summary: Zahlung initiieren
      description: Erstellt eine neue Zahlungssession für den Kauf von Credits
      operationId: createCheckoutSession
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                packageId:
                  type: string
                  description: ID des Kreditpakets
                  example: "basic_package"
      responses:
        '200':
          description: Zahlung erfolgreich initiiert
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                    description: Stripe-Sitzungs-ID
                  url:
                    type: string
                    description: URL zur Zahlungsseite
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT-Token zur Authentifizierung. Format: 'Bearer [token]'

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Eindeutige Benutzer-ID
        email:
          type: string
          format: email
          description: E-Mail-Adresse des Benutzers
        name:
          type: string
          description: Name des Benutzers
        avatar:
          type: string
          description: URL zum Profilbild
        credits:
          type: integer
          description: Verfügbare Credits
        createdAt:
          type: string
          format: date-time
          description: Erstellungszeitpunkt
      required:
        - id
        - email
        - name

    Flashcard:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Eindeutige Lernkarten-ID
        question:
          type: string
          description: Fragetext
        answer:
          type: string
          description: Antworttext
      required:
        - id
        - question
        - answer

    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Eindeutige Fragen-ID
        text:
          type: string
          description: Fragetext
        options:
          type: array
          items:
            type: string
          description: Antwortoptionen
        correctAnswer:
          type: integer
          description: Index der richtigen Antwort (0-basiert)
        explanation:
          type: string
          description: Erklärung zur richtigen Antwort
      required:
        - id
        - text
        - options
        - correctAnswer

    Topic:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Eindeutige Themen-ID
        name:
          type: string
          description: Name des Themas
        isMainTopic:
          type: boolean
          description: Gibt an, ob es sich um ein Hauptthema handelt
        parentId:
          type: string
          format: uuid
          nullable: true
          description: ID des übergeordneten Themas (falls vorhanden)
        description:
          type: string
          description: Beschreibung des Themas
        isKeyTerm:
          type: boolean
          description: Gibt an, ob es sich um einen Schlüsselbegriff handelt
      required:
        - id
        - name

    Connection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Eindeutige Verbindungs-ID
        sourceId:
          type: string
          format: uuid
          description: ID des Quellthemas
        targetId:
          type: string
          format: uuid
          description: ID des Zielthemas
        label:
          type: string
          description: Bezeichnung der Verbindung
      required:
        - id
        - sourceId
        - targetId
        - label

    Error:
      type: object
      properties:
        code:
          type: string
          description: Fehlercode
        message:
          type: string
          description: Fehlermeldung
        details:
          type: object
          description: Weitere Fehlerdetails
      required:
        - code
        - message

  responses:
    BadRequest:
      description: Ungültige Anfrage
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "BAD_REQUEST"
            message: "Ungültige Anfrageparameter"
            details:
              field: "email"
              reason: "Ungültiges Format"

    Unauthorized:
      description: Nicht autorisiert
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Authentifizierung erforderlich"

    NotFound:
      description: Ressource nicht gefunden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "Die angeforderte Ressource wurde nicht gefunden"
            details:
              resourceType: "Session"
              id: "550e8400-e29b-41d4-a716-446655440000"

    ServerError:
      description: Serverfehler
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "SERVER_ERROR"
            message: "Ein interner Serverfehler ist aufgetreten"